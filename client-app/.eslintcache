[{"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\index.tsx":"1","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\reportWebVitals.ts":"2","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\stores\\store.ts":"3","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\layout\\App.tsx":"4","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\stores\\dishStore.ts":"5","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\api\\agent.ts":"6","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\dishes\\dashboard\\DishDashboard.tsx":"7","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\dishes\\dashboard\\DishList.tsx":"8","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"9","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\dishes\\dashboard\\DishItem.tsx":"10","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\stores\\categoryStore.ts":"11","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\layout\\NavBar.tsx":"12","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\dishes\\dashboard\\DishListItemPlaceholder.tsx":"13","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\home\\HomePage.tsx":"14","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\models\\dish.ts":"15","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\dishes\\form\\DishForm.tsx":"16","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\common\\form\\MyTextArea.tsx":"17","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\common\\form\\MyTextInput.tsx":"18","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\common\\form\\MySelectInput.tsx":"19","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\models\\portion.ts":"20","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\common\\imageUpload\\PhotoWidgetCropper.tsx":"21","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\common\\imageUpload\\PhotoWidgetDropzone.tsx":"22","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\stores\\ingredientStore.ts":"23","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\models\\ingredient.ts":"24","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\models\\user.ts":"25","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\stores\\userStore.ts":"26","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\users\\LoginForm.tsx":"27","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\stores\\commonStore.ts":"28","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\stores\\modalStore.ts":"29","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\common\\modals\\ModalContainer.tsx":"30","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\users\\RegisterForm.tsx":"31","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\errors\\ValidationErrors.tsx":"32","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\cart\\ShoppingCart.tsx":"33","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\stores\\orderStore.ts":"34","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\orders\\OrderList.tsx":"35","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\models\\order.ts":"36","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\models\\portionOrder.ts":"37","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\stores\\dishOrder.ts":"38","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\layout\\PrivateRoute.tsx":"39","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\layout\\PrivateRouteAdmin.tsx":"40","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\errors\\NotFound.tsx":"41"},{"size":824,"mtime":1650992090332,"results":"42","hashOfConfig":"43"},{"size":425,"mtime":499162500000,"results":"44","hashOfConfig":"43"},{"size":1004,"mtime":1651257308568,"results":"45","hashOfConfig":"43"},{"size":1846,"mtime":1651394935008,"results":"46","hashOfConfig":"43"},{"size":2654,"mtime":1651072857678,"results":"47","hashOfConfig":"43"},{"size":2410,"mtime":1651172383696,"results":"48","hashOfConfig":"43"},{"size":1664,"mtime":1651393455933,"results":"49","hashOfConfig":"43"},{"size":459,"mtime":1650965391524,"results":"50","hashOfConfig":"43"},{"size":384,"mtime":1650734813976,"results":"51","hashOfConfig":"43"},{"size":4795,"mtime":1651352970344,"results":"52","hashOfConfig":"43"},{"size":1026,"mtime":1651062225855,"results":"53","hashOfConfig":"43"},{"size":2965,"mtime":1651393211682,"results":"54","hashOfConfig":"43"},{"size":2130,"mtime":1651092542011,"results":"55","hashOfConfig":"43"},{"size":2028,"mtime":1651175667820,"results":"56","hashOfConfig":"43"},{"size":1059,"mtime":1651348042135,"results":"57","hashOfConfig":"43"},{"size":8197,"mtime":1651348105324,"results":"58","hashOfConfig":"43"},{"size":690,"mtime":1648975414831,"results":"59","hashOfConfig":"43"},{"size":690,"mtime":1650976169851,"results":"60","hashOfConfig":"43"},{"size":987,"mtime":1648975414830,"results":"61","hashOfConfig":"43"},{"size":359,"mtime":1651347930427,"results":"62","hashOfConfig":"43"},{"size":701,"mtime":1651000316345,"results":"63","hashOfConfig":"43"},{"size":1205,"mtime":1651005081842,"results":"64","hashOfConfig":"43"},{"size":1057,"mtime":1651088800712,"results":"65","hashOfConfig":"43"},{"size":217,"mtime":1651093489848,"results":"66","hashOfConfig":"43"},{"size":229,"mtime":1651162068778,"results":"67","hashOfConfig":"43"},{"size":3155,"mtime":1651392934147,"results":"68","hashOfConfig":"43"},{"size":1391,"mtime":1651173243952,"results":"69","hashOfConfig":"43"},{"size":678,"mtime":1651171677452,"results":"70","hashOfConfig":"43"},{"size":519,"mtime":1651172570001,"results":"71","hashOfConfig":"43"},{"size":491,"mtime":1651172727679,"results":"72","hashOfConfig":"43"},{"size":2044,"mtime":1651179599390,"results":"73","hashOfConfig":"43"},{"size":529,"mtime":1651179224415,"results":"74","hashOfConfig":"43"},{"size":2497,"mtime":1651353578373,"results":"75","hashOfConfig":"43"},{"size":2255,"mtime":1651357406233,"results":"76","hashOfConfig":"43"},{"size":4312,"mtime":1651356496495,"results":"77","hashOfConfig":"43"},{"size":426,"mtime":1651347970931,"results":"78","hashOfConfig":"43"},{"size":503,"mtime":1651350908308,"results":"79","hashOfConfig":"43"},{"size":260,"mtime":1651351087465,"results":"80","hashOfConfig":"43"},{"size":564,"mtime":1651394056265,"results":"81","hashOfConfig":"43"},{"size":600,"mtime":1651394185154,"results":"82","hashOfConfig":"43"},{"size":660,"mtime":1651395216911,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"1vifz1o",{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\index.tsx",[],["169","170"],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\reportWebVitals.ts",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\stores\\store.ts",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\layout\\App.tsx",["171"],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\stores\\dishStore.ts",["172"],"import { makeAutoObservable, reaction, runInAction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { Dish, DishFormValues } from '../models/dish';\r\nimport { Portion } from '../models/portion';\r\n\r\nexport default class DishStore {\r\n    dishes: Dish[] = [];\r\n    loadingInitial = false;\r\n    predicate = new Map().set(\"categoryName\", \"All\");\r\n    loadingCreate = false;\r\n    // uploading = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.dishes.splice(0, this.dishes.length);\r\n                this.loadDishes();\r\n            }\r\n        )\r\n    }\r\n\r\n    // computed property\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        this.predicate.forEach((value, key) => params.append(key, value));\r\n        // params.append(\"categoryName\", \"Pizza\");\r\n        return params;\r\n    }\r\n\r\n    setPredicate = (value: string) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                this.predicate.delete(key)\r\n            })\r\n        }  \r\n        resetPredicate();\r\n        this.predicate.set(\"categoryName\", value);\r\n    }\r\n\r\n    sortDishesPortions = (dishes: Dish[]) => {\r\n        dishes.forEach(dish => dish.portions.sort((p1, p2) => +p1.size.replace(/[^0-9]/g, '') - +p2.size.replace(/[^0-9]/g, '')))\r\n        return dishes;\r\n    }\r\n\r\n    loadDishes = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Dishes.list(this.axiosParams);\r\n            console.log(result);\r\n            runInAction(() => {\r\n                this.dishes = this.sortDishesPortions(result);\r\n                this.loadingInitial = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingInitial = false\r\n            });\r\n        }\r\n    }\r\n\r\n    createDish = async (dish: DishFormValues) => {\r\n        this.loadingCreate = true;\r\n        try {\r\n            // console.log(dish);\r\n            await agent.Dishes.create(dish);\r\n            runInAction(() => this.loadingCreate = false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingCreate = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (dish: Dish, file: Blob) => {\r\n        // this.uploading = true;\r\n        try {\r\n            await agent.Dishes.uploadPhoto(dish.id, file);\r\n        } catch(error) {\r\n            console.log(error);\r\n            // runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n}","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\api\\agent.ts",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\dishes\\dashboard\\DishDashboard.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\dishes\\dashboard\\DishList.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\dishes\\dashboard\\DishItem.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\stores\\categoryStore.ts",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\layout\\NavBar.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\dishes\\dashboard\\DishListItemPlaceholder.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\home\\HomePage.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\models\\dish.ts",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\dishes\\form\\DishForm.tsx",["173","174"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { Button, Divider, Grid, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { Dish, DishFormValues } from \"../../../app/models/dish\";\r\nimport { Portion } from \"../../../app/models/portion\";\r\nimport PhotoWidgetDropzone from \"../../../app/common/imageUpload/PhotoWidgetDropzone\";\r\nimport PhotoWidgetCropper from \"../../../app/common/imageUpload/PhotoWidgetCropper\";\r\nimport { Ingredient } from \"../../../app/models/ingredient\";\r\n\r\nexport default observer(function DishForm() {\r\n    const history = useHistory();\r\n    const {dishStore, categoryStore, ingredientStore} = useStore();\r\n    const {createDish, uploadPhoto} = dishStore;\r\n    const {formCategoryOptions, categoryOptions, \r\n        categories, loadCategories, loadingCategories} = categoryStore;\r\n    const {loadIngredients, ingredients, ingredientsOptions, formIngredientOptions} = ingredientStore\r\n\r\n    const [dish, setDish] = useState<DishFormValues>(new DishFormValues());\r\n    const [portions, setPortions] = useState<Portion[]>([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [ingredientsLocal, setIngredientsLocal] = useState<Ingredient[]>([]);\r\n\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop(dish: Dish) {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(dish, blob!));\r\n        }\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required('The dish is required'),\r\n        description: Yup.string().required('The dish description is required'),\r\n    })\r\n\r\n    useEffect(() => {\r\n        loadCategories().then(() => formCategoryOptions());\r\n        loadIngredients().then(() => formIngredientOptions());\r\n        // return () => {\r\n        //     // actually, invoke dispose() method for each file to clean up resources\r\n        //     files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        // }\r\n    }, [formCategoryOptions, loadCategories, formIngredientOptions, loadIngredients]);\r\n\r\n    function handleFormSubmit(dish: DishFormValues) {\r\n        if (!dish.id) { \r\n            let category = categories.find(c => c.name === dish.category)!!;\r\n            let newIngredients: Ingredient[] = [];\r\n            dish.ingredients.filter(i => !!i.name).forEach(ingredient => {\r\n                newIngredients.push(ingredients.find(i => i.name === ingredient.name)!!);\r\n            })\r\n            let newDish = {\r\n                ...dish,\r\n                category,\r\n                portions: dish.portions.filter(p => !!p.price && !!p.size), // portions that are not empty\r\n                ingredients: newIngredients, // ingredients that are not empty\r\n                id: uuid()\r\n            };\r\n\r\n            // console.log(newDish);\r\n\r\n            setLoading(true);\r\n            createDish(newDish).then(() => onCrop(newDish)).then(() => setTimeout(() => {\r\n                history.push('/dishes');\r\n                setLoading(false);\r\n            }, 5000));\r\n        } \r\n    }\r\n\r\n    function handlePortionCreate() {\r\n        setPortions([...portions, {size: '', price: 0}]);\r\n    }\r\n\r\n    function handleIngredientCreate() {\r\n        setIngredientsLocal([...ingredientsLocal, {name: ''}]);\r\n    }\r\n\r\n    if(loadingCategories) return <LoadingComponent content=\"Loading...\"/>\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Dish Info' sub style={{fontSize: '18px', marginBottom: '10px', color: '#cb410b'}} />\r\n            {/* widget start */}\r\n            <Grid>\r\n                <Grid.Column width={4}>\r\n                    <Header sub content='Add photo' style={{textAlign: 'center', color: '#cb410b'}} />\r\n                    <PhotoWidgetDropzone setFiles={setFiles} />\r\n                </Grid.Column>\r\n                <Grid.Column width={1} />\r\n                <Grid.Column width={4}>\r\n                    <Header sub content='Resize photo' style={{textAlign: 'center', color: '#cb410b'}} />\r\n                    {files &&\r\n                        files.length > 0 && (\r\n                            <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview}/>\r\n                        )}\r\n                </Grid.Column>\r\n                <Grid.Column width={1} />\r\n            </Grid>\r\n            {/* widget end */}\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={dish} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({handleSubmit, isValid, dirty}) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='name' placeholder='Name' />\r\n                        <MyTextArea name='description' placeholder='Description' rows={3} />\r\n                        <MySelectInput options={categoryOptions} name='category' placeholder='Category' />\r\n                        <Header content='Ingredients' sub style={{fontSize: '16px', marginBottom: '10px', color: '#cb410b'}} />  \r\n                        {ingredientsLocal && ingredientsLocal.map((ingredient, index) => (\r\n                            <Fragment key={index}>\r\n                                <MySelectInput \r\n                                    options={ingredientsOptions} \r\n                                    name={`ingredients[${index}].name`} \r\n                                    placeholder='Ingredient' />\r\n                            </Fragment>\r\n                        ))}\r\n                        <Button  \r\n                            type='button' \r\n                            content='Add ingredient'\r\n                            onClick={() => handleIngredientCreate()}\r\n                            style={{marginBottom: '20px', backgroundColor: '#cb410b', color: '#fff'}} />       \r\n                        <Divider />\r\n                        <Header content='Portions' sub style={{fontSize: '16px', marginBottom: '10px', color: '#cb410b'}} />          \r\n                        {portions && portions.map((portion, index) => (\r\n                            <Fragment key={index}>\r\n                                <Header content={index + 1} style={{fontSize: '14px', color: '#cb410b'}} />\r\n                                <MyTextInput name={`portions[${index}].size`} placeholder='Size' />\r\n                                <MyTextInput name={`portions[${index}].price`} placeholder='Price' />\r\n                            </Fragment>\r\n                        ))} \r\n                        <Button  \r\n                            type='button' \r\n                            content='Add portion'\r\n                            onClick={() => handlePortionCreate()}\r\n                            style={{marginBottom: '20px', backgroundColor: '#cb410b', color: '#fff'}} /> \r\n                        <Button \r\n                            disabled={loading || !dirty || !isValid}\r\n                            loading={loading} \r\n                            floated='right' \r\n                            positive \r\n                            type='submit' \r\n                            content='Submit' />\r\n                        <Button \r\n                            as={Link} \r\n                            to='/dishes' \r\n                            floated='right' \r\n                            type='submit' \r\n                            content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})\r\n\r\n","C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\common\\form\\MyTextArea.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\common\\form\\MyTextInput.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\common\\form\\MySelectInput.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\models\\portion.ts",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\common\\imageUpload\\PhotoWidgetCropper.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\common\\imageUpload\\PhotoWidgetDropzone.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\stores\\ingredientStore.ts",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\models\\ingredient.ts",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\models\\user.ts",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\stores\\userStore.ts",["175","176","177"],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\users\\LoginForm.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\stores\\commonStore.ts",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\stores\\modalStore.ts",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\common\\modals\\ModalContainer.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\users\\RegisterForm.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\errors\\ValidationErrors.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\cart\\ShoppingCart.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\stores\\orderStore.ts",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\orders\\OrderList.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\models\\order.ts",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\models\\portionOrder.ts",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\stores\\dishOrder.ts",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\layout\\PrivateRoute.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\app\\layout\\PrivateRouteAdmin.tsx",[],"C:\\Dima\\.NET_labs\\Restaurant\\client-app\\src\\features\\errors\\NotFound.tsx",[],{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":10,"column":8,"nodeType":"184","messageId":"185","endLine":10,"endColumn":17},{"ruleId":"182","severity":1,"message":"186","line":4,"column":10,"nodeType":"184","messageId":"185","endLine":4,"endColumn":17},{"ruleId":"182","severity":1,"message":"187","line":5,"column":10,"nodeType":"184","messageId":"185","endLine":5,"endColumn":19},{"ruleId":"182","severity":1,"message":"188","line":28,"column":18,"nodeType":"184","messageId":"185","endLine":28,"endColumn":25},{"ruleId":"182","severity":1,"message":"189","line":1,"column":10,"nodeType":"184","messageId":"185","endLine":1,"endColumn":23},{"ruleId":"182","severity":1,"message":"190","line":5,"column":10,"nodeType":"184","messageId":"185","endLine":5,"endColumn":14},{"ruleId":"182","severity":1,"message":"186","line":6,"column":10,"nodeType":"184","messageId":"185","endLine":6,"endColumn":17},"no-native-reassign",["191"],"no-negated-in-lhs",["192"],"@typescript-eslint/no-unused-vars","'LoginForm' is defined but never used.","Identifier","unusedVar","'Portion' is defined but never used.","'useParams' is defined but never used.","'setDish' is assigned a value but never used.","'ConsoleLogger' is defined but never used.","'Dish' is defined but never used.","no-global-assign","no-unsafe-negation"]